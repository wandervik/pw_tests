name: S3 Continuous Deployment to dev

# on:
#   pull_request:
#     types: [closed]
#     branches: [ 'release', 'master' ]
# on:
#   push:
#     branches: [ 'release', 'master' ]

on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: Select the environment
        default: 'prod'

env:
  AWS_REGION: "eu-central-1"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_S3_PATH_DEV: s3://playwire-mobile-test
  AWS_S3_PATH_PROD: s3://tarabarova-prod


jobs:
  build-deploy-dev:
    if: github.ref == 'refs/heads/release'
    runs-on: ubuntu-latest
    env:
     AWS_CDN_DISTRIBUTION: E3MY6RLJJ44XBK

    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - run: echo ${{github.ref}}

      - name: Get version
        id: version
        uses: notiz-dev/github-action-json-property@release
        with:
            path: 'package.json'
            prop_path: 'version'
      - run: echo "prev_version=${{steps.version.outputs.prop}}" >> $GITHUB_ENV

      - run: mkdir temp
      - name: Create temporary version file
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "temp/package.json"
          json: '{"version":"${{ env.prev_version }}"}'

      - name:  'Automated Version Bump'
        uses:  'phips28/gh-action-bump-version@master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGEJSON_DIR:  'temp'
        with:
          minor-wording:  'add,Adds,new,feat,minor'
          major-wording:  'MAJOR,cut-major'
          patch-wording:  'patch,fixes'
          rc-wording:     'RELEASE,alpha'
          skip-commit:  'true'
          skip-tag: 'true'

      - name: Get new version
        id: new_version
        uses: notiz-dev/github-action-json-property@release
        with:
            path: 'temp/package.json'
            prop_path: 'version'
      - run: echo "new_version=${{steps.new_version.outputs.prop}}" >> $GITHUB_ENV

      # - name: Debug
      #   run: echo "old version is - ${{ env.prev_version }} and new version for dev is - ${{ env.new_version }} and version for prod is ${{ env.prod_version }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check old version repositiry existing
        run: |
          if [[ $(aws s3 ls ${{ env.AWS_S3_PATH_DEV }}/${{ env.prev_version }}| head) ]]; then echo "Old version exists"; else exit 1; fi

      # - name: Prevent overriding old version
      #   run: |
      #     if [[ $(aws s3 ls ${{ env.AWS_S3_PATH_DEV }}/${{ env.new_version }}| head) ]]; then exit 1; else echo "New version doesn't exist"; fi

      # - name: NPM build
      #   run: |
      #   uses: actions/setup-node@master
      #   with:
      #     node-version: 12
      # - run: npm run buildCDN:dev #require version specifying

# Debug msg versions:
# echo "old version is - ${{ env.prev_version }} and new version is - ${{ env.new_version }}"

# >>>>>>>>>>>>>>>>>>>>>> DEPLOY <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

      - name: Push to bucket
        run: |
          aws s3 sync dist ${{ env.AWS_S3_PATH_DEV }}/${{ env.new_version }} --acl public-read

      # - name: Invalidate CDN
      #   uses: chetan/invalidate-cloudfront-action@v2
      #   env:
      #     DISTRIBUTION: ${{ env.AWS_CDN_DISTRIBUTION }}
      #     PATHS: "/*"
      #     AWS_REGION: ${{ env.AWS_REGION }}
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


# >>>>>>>>>>>>>>>>>>>>>> PROD <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  build-deploy-prod:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    env:
      AWS_CDN_DISTRIBUTION: E3MY6RLJJ44XBK

    environment: prod

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - run: echo ${{github.ref}}

      - name: Get version
        id: prev_version
        uses: notiz-dev/github-action-json-property@release
        with:
            path: 'package.json'
            prop_path: 'version'
      - run: echo "prev_version=${{steps.prev_version.outputs.prop}}" >> $GITHUB_ENV

      - name:  'Automated Version Bump'
        uses:  'phips28/gh-action-bump-version@master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          minor-wording:  'add,Adds,new,feat,minor'
          major-wording:  'MAJOR,cut-major'
          patch-wording:  'patch,fixes'
          rc-wording:     'RELEASE,alpha'
          commit-message: 'Bumped version number. Current version: {{version}}'

      - name: Get new version
        id: new_version
        uses: notiz-dev/github-action-json-property@release
        with:
            path: 'package.json'
            prop_path: 'version'
      - run: echo "new_version=${{steps.new_version.outputs.prop}}" >> $GITHUB_ENV


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # - name: Check old version repositiry existing
      #   run: |
      #     if [[ $(aws s3 ls ${{ env.AWS_S3_PATH_PROD }}/${{ env.prev_version }}| head) ]]; then echo "Old version exists"; else exit 1; fi

      # - name: Prevent overriding old version
      #   run: |
      #     if [[ $(aws s3 ls ${{ env.AWS_S3_PATH_PROD }}/${{ env.new_version }}| head) ]]; then exit 1; else echo "New version doesn't exist"; fi

      # - name: Check if prod version was tested on dev
      #   run: |
      #     if [[ $(aws s3 ls ${{ env.AWS_S3_PATH_DEV }}/${{ env.new_version }}| head) ]]; then echo "The version was tested on dev"; else exit 1; fi

      # - name: NPM build
      #   run: |
      #   uses: actions/setup-node@master
      #   with:
      #     node-version: 12
      # - run: npm run buildCDN:dev

# Debug msg versions:
# echo "old version is - ${{ env.prev_version }} and new version is - ${{ env.new_version }}"

# >>>>>>>>>>>>>>>>>>>>>> DEPLOY <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

      - name: Push to bucket
        run: |
          aws s3 sync dist ${{ env.AWS_S3_PATH_DEV }}/${{ env.new_version }} --acl public-read

      # - name: Invalidate CDN
      #   uses: chetan/invalidate-cloudfront-action@v2
      #   env:
      #     DISTRIBUTION: ${{ env.AWS_CDN_DISTRIBUTION }}
      #     PATHS: "/*"
      #     AWS_REGION: ${{ env.AWS_REGION }}
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


      - name: Get current timestamp
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 2
          format: 'YYYY-MM-DD-HH-mm-ss'

      - name: Usage
        env:
          TIME: "${{ steps.time.outputs.time }}"
        run: |
          echo "## Version ${{ env.new_version }}" >> CHANGELOG.md
          echo "[ ${{ env.TIME }} ] : deployed on dev <br />" >> CHANGELOG.md
          echo "Last commit message: ${{ github.event.head_commit.message }}" >> CHANGELOG.md

      # - name: Commit file
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     git commit CHANGELOG.md -m 'automated commit'
      #     git push

      - uses: stefanzweifel/git-auto-commit-action@v4
        # env:
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
         commit_message: Automated Change
         branch: changelog
         file_pattern: CHANGELOG.md
