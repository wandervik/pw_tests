name: Test conditional jobs

on:
  push

env:
  AWS_REGION: "eu-central-1"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_S3_PATH_PROD: s3://tarabarova-prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.new_version.outputs.prop }}
      output2: ${{ steps.folder-check.outputs.result }}

    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name:  'Automated Version Bump'
        uses:  'phips28/gh-action-bump-version@master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          minor-wording:  'MINOR_UPDATE'
          major-wording:  'MAJOR_UPDATE'
          patch-wording:  'PATCH_UPDATE'
          skip-commit:  'true'
          skip-tag: 'true'

      - name: Get new version
        id: new_version
        uses: notiz-dev/github-action-json-property@release
        with:
            path: 'package.json'
            prop_path: 'version'
      - run: echo "new_version=${{steps.new_version.outputs.prop}}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check old version repositiry
        id: folder-check
        run: |
          echo "::set-output name=result::$(if [[ $(aws s3 ls ${{ env.AWS_S3_PATH_PROD }}/${{ env.new_version }}| head) ]]; then echo "overriding"; else echo "new-folder"; fi)"
      # - run: echo "result=${{steps.folder-check.outputs.prop}}" >> $GITHUB_ENV

      - name: Push to bucket
        run: |
          aws s3 sync dist ${{ env.AWS_S3_PATH_PROD }}/${{ env.new_version }} --delete --dryrun

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: dist/

  release:
    runs-on: ubuntu-latest
    needs: deploy
    environment: dev

    steps:
    - name: Download a Build Artifact
      uses: actions/download-artifact@v3.0.0
      with:
        name: build
        path: build

    - name: Display structure of downloaded files
      run: ls -R

    - name: Archive artifacts
      run: zip -r build.zip build

    - name: Create Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{needs.deploy.outputs.output1}}
        release_name: ${{needs.deploy.outputs.output1}}
        draft: true
        prerelease: false

    - uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build.zip
        asset_name: build.zip
        asset_content_type: application/zip

    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}
